using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BO = TrackerMVCEntities.BusinessEntities;
using DB = TrackerMVCDataLayer.TicketSystem;
using BL = TrackerMVCBusinessLayer;

namespace TrackerMVCBusinessLayer.TrackerMVCBusinessManger.TicketSystem
{
    public class TicketSystemBusinessLayer
    {
        DB.TicketSystemDataLayer DBManager = new DB.TicketSystemDataLayer();
        public List<BO.TicketSystem> AjaxAddOrEditTicketData(BO.TicketSystem data, DataTable TktAttachment, string UserName, string strpath)
        {
            string TktNo = "";
            List<BO.TicketSystem> ReceivedList = new List<BO.TicketSystem>();
            DataTable ReceivedListDL = new DataTable();
            ReceivedListDL = DBManager.AjaxAddOrEditTicketData(data.MailID, data.TktType, data.Subject, data.Description, data.AddedBy, data.AddedOn, TktAttachment);
            if (ReceivedListDL != null)
            {
                foreach (DataRow row in ReceivedListDL.Rows)
                {
                    BO.TicketSystem UtilityData = new BO.TicketSystem();
                    UtilityData.TktNo = Convert.ToString(row["TktNo"]);
                    TktNo = Convert.ToString(row["TktNo"]);
                    UtilityData.StatusID = Convert.ToInt32(row["Status"]);
                    UtilityData.Message = Convert.ToString(row["Message"]);
                    ReceivedList.Add(UtilityData);
                }
            }
            /*************************For MAil********************************/
            Boolean edata = false;
            string SendTO = data.MailID;
            string strText = "";
            string strtable = "";
            string date = DateTime.Now.ToString("dd-MMM-yyyy HH:mm");

            string Issues = "Ticket";
            DataTable dt = new DataTable();
            dt = DBManager.AjaxGetMailSettingDetail(Issues);
            
            string Subject = dt.Rows[0]["SubjectPrefix"] + ": New Ticket No. " + TktNo + " generated by " + UserName + ".   ";
            strText += "<font face='Calibri' color='black' size=3> <strong>Ticket Details... </strong> </font> <br>";
            strtable += "<html><body>";
            strtable += "<table align='left' cellpadding='0' cellspacing='0' bordercolor='black'  border='1' Style='width: 100%; height: auto;'>  ";
            strtable += "<tr bgcolor='white'><td style='font-family:Calibri; color:black; size:3 ;padding-left: 10px; padding-bottom: 05px; padding-top: 05px; padding-right: 20px;'>" + strText + "<br> </td></tr>";
            strtable += "<tr bgcolor='white'><td style='font-family:Calibri; color:black; size:3  ;padding-left: 10px; padding-bottom: 05px; padding-top: 05px; padding-right: 20px;'> Ticket No.:" + TktNo + "<br> </td></tr>";
            strtable += "<tr bgcolor='white'><td style='font-family:Calibri; color:black; size:3  ;padding-left: 10px; padding-bottom: 05px; padding-top: 05px; padding-right: 20px;'> Ticket Date:" + date + "<br> </td></tr>";
            strtable += "<tr bgcolor='white'><td style='font-family:Calibri; color:black; size:3  ;padding-left: 10px; padding-bottom: 05px; padding-top: 05px; padding-right: 20px;'> Module/Subject:" + data.Subject + "<br> </td></tr>";
            strtable += "<tr bgcolor='white'><td style='font-family:Calibri; color:black; size:3  ;padding-left: 10px; padding-bottom: 05px; padding-top: 05px; padding-right: 20px;'> Description:" + data.Description + "<br> </td></tr>";
            strtable += "</table>";
            strtable += "</body></html>";
            strtable += "<font face='Calibri' color='black' size=3>  </font> <br>";
            strtable += "<font face='Calibri' color='black' size=3>  </font> <br>";


            if (dt != null)
            {
                if (dt.Rows.Count > 0)
                {
                    TrackerMVCBusinessLayer.TrackerMVCBusinessManger.TicketSystem.EmailHelper obj = new TrackerMVCBusinessLayer.TrackerMVCBusinessManger.TicketSystem.EmailHelper();
                    // BL.EmailHelper obj = new BL.EmailHelper();
                    edata = obj.SendEMail(Convert.ToInt32(dt.Rows[0]["SMTPServerPort"]), dt.Rows[0]["SMTPServer"].ToString(), dt.Rows[0]["MailFromID"].ToString(), dt.Rows[0]["UserPassword"].ToString(), dt.Rows[0]["MailTo"].ToString(), Subject, strtable, dt.Rows[0]["MailCC"].ToString(), dt.Rows[0]["MailBCC"].ToString(), strpath);
                }
            }
            /*************************For MAil********************************/


            return ReceivedList;
        }
        public string AjaxDeleteTicketData(string ID, string UserID, string Reason)
        {
            string Message = "";
            List<BO.TicketSystem> ReceivedList = new List<BO.TicketSystem>();
            DataTable ReceivedListDL = new DataTable();
            ReceivedListDL = DBManager.AjaxDeleteTicketData( ID,  UserID,  Reason);
            Message = "Data Deleted Successfully!";
            return Message;
        }
        public string AjaxApproveTicketData(string ID, string UserID)
        {
            string Message = "";
            List<BO.TicketSystem> ReceivedList = new List<BO.TicketSystem>();
            DataTable ReceivedListDL = new DataTable();
            ReceivedListDL = DBManager.AjaxApproveTicketData( ID,  UserID);
            Message = "Data Approved Successfully!";
            return Message;
        }
        public string AjaxUpdateTicketTypeDetails(string ID, string UserID, int TktType)
        {
            string Message = "";
            List<BO.TicketSystem> ReceivedList = new List<BO.TicketSystem>();
            DataTable ReceivedListDL = new DataTable();
            ReceivedListDL = DBManager.AjaxUpdateTicketTypeDetails( ID,  UserID,  TktType);
            Message = "Data Updated Successfully!";
            return Message;
        }
        public List<BO.TicketSystem> AjaxGetOpenTicketData(string UserID)
        {

            List<BO.TicketSystem> ReceivedList = new List<BO.TicketSystem>();
            DataTable ReceivedListDL = new DataTable();
            ReceivedListDL = DBManager.AjaxGetOpenTicketData( UserID);
            int i = 0;
            if (ReceivedListDL != null)
            {
                foreach (DataRow row in ReceivedListDL.Rows)
                {
                    i++;
                    BO.TicketSystem UtilityData = new BO.TicketSystem();
                    UtilityData.SrNo = i;
                    UtilityData.TktNo = Convert.ToString(row["Ticket No"]);
                    UtilityData.Description = Convert.ToString(row["Description"]);
                    UtilityData.TktTypeName = Convert.ToString(row["Ticket Type"]);
                    UtilityData.UserName = Convert.ToString(row["Raised By"]);
                    UtilityData.AddedOn = Convert.ToString(row["Raised On"]);
                    UtilityData.PendingSince = Convert.ToInt32(row["Pending Since"]);                  
                    UtilityData.ID = Convert.ToInt32(row["ID"]);                  
                    UtilityData.IsApproved = Convert.ToInt32(row["IsApproved"]);                  
                    ReceivedList.Add(UtilityData);
                }
            }

            return ReceivedList;
        }
        public List<BO.TicketSystem> AjaxGetClosedTicketData(string FromDate, string ToDate)
        {

            List<BO.TicketSystem> ReceivedList = new List<BO.TicketSystem>();
            DataTable ReceivedListDL = new DataTable();
            ReceivedListDL = DBManager.AjaxGetClosedTicketData( FromDate, ToDate);
            int i = 0;
            if (ReceivedListDL != null)
            {
                foreach (DataRow row in ReceivedListDL.Rows)
                {
                    i++;
                    BO.TicketSystem UtilityData = new BO.TicketSystem();
                    UtilityData.SrNo = i;
                    UtilityData.TktNo = Convert.ToString(row["Ticket No"]);
                    UtilityData.Description = Convert.ToString(row["Description"]);
                    UtilityData.TktTypeName = Convert.ToString(row["Ticket Type"]);
                    UtilityData.UserName = Convert.ToString(row["Raised By"]);
                    UtilityData.AddedOn = Convert.ToString(row["Raised On"]);
                    UtilityData.ClosedOn = Convert.ToString(row["Closed On"]);
                    UtilityData.ClosedByName = Convert.ToString(row["Closed By"]);
                    UtilityData.PendingSince = Convert.ToInt32(row["Pending Since"]);                  
                    UtilityData.ID = Convert.ToInt32(row["ID"]);                  
                    ReceivedList.Add(UtilityData);
                }
            }

            return ReceivedList;
        }
        public List<BO.TicketSystem> AjaxGetDashboardTicketData(int UserID)
        {

            List<BO.TicketSystem> ReceivedList = new List<BO.TicketSystem>();
            DataTable ReceivedListDL = new DataTable();
            ReceivedListDL = DBManager.AjaxGetDashboardTicketData(UserID);
            int i = 0;
            if (ReceivedListDL != null)
            {
                foreach (DataRow row in ReceivedListDL.Rows)
                {
                    i++;
                    BO.TicketSystem UtilityData = new BO.TicketSystem();
                    UtilityData.TotalTkt = Convert.ToInt32(row["TotalTkt"]);                  
                    UtilityData.OpenTkt = Convert.ToInt32(row["OpenTkt"]);                  
                    UtilityData.OpenNewReqTkt = Convert.ToInt32(row["OpenNewReqTkt"]);                  
                    UtilityData.OpenAwaitApprTkt = Convert.ToInt32(row["OpenAwaitApprTkt"]);                  
                    UtilityData.OpenApprTkt = Convert.ToInt32(row["OpenApprTkt"]);                  
                    UtilityData.OpenBugTkt = Convert.ToInt32(row["OpenBugTkt"]);                  
                    UtilityData.OpenCorrectionTkt = Convert.ToInt32(row["OpenCorrectionTkt"]);                  
                    UtilityData.OpenBugTktLessthan72 = Convert.ToInt32(row["OpenBugTktLessthan72"]);                  
                    UtilityData.OpenBugTktGreaterthan72 = Convert.ToInt32(row["OpenBugTktGreaterthan72"]);                  
                    UtilityData.ClosedTkt = Convert.ToInt32(row["ClosedTkt"]);                  
                    UtilityData.ClosedNewReqTkt = Convert.ToInt32(row["ClosedNewReqTkt"]);                  
                    UtilityData.ClosedBugTkt = Convert.ToInt32(row["ClosedBugTkt"]);                  
                    UtilityData.ClosedCorrectionTkt = Convert.ToInt32(row["ClosedCorrectionTkt"]);                  
                    ReceivedList.Add(UtilityData);
                }
            }

            return ReceivedList;
        }
        public List<BO.AttachmentList> AjaxgeCaptureDetails(string url, string FilePath, string DocName, string ContentType)
        {
            //Your implementation logic
            List<BO.AttachmentList> CategoryList = new List<BO.AttachmentList>();
            DataTable CategoryDL = new DataTable();
            BO.AttachmentList PortDataList = new BO.AttachmentList();
            PortDataList.url = url;
            PortDataList.FilePath = FilePath;
            PortDataList.DocName = DocName;
            PortDataList.ContentType = "image/png";
            CategoryList.Add(PortDataList);

            return CategoryList;
        }
        public BO.TicketSystem GetDetailsForTicket(int ID)
        {
            BO.TicketSystem UtilityData = new BO.TicketSystem();
            List<BO.AttachmentList> UtilityAttachmentList = new List<BO.AttachmentList>();
            DataSet MasterDataSet = DBManager.GetDetailsForTicket(ID);
            DataTable dt1 = new DataTable();
            DataTable dt2 = new DataTable();

            dt1 = MasterDataSet.Tables[0];
            dt2 = MasterDataSet.Tables[1];
            if (dt1 != null)
            {
                foreach (DataRow row in dt1.Rows)
                {
                    UtilityData.TktNo = Convert.ToString(row["Ticket No"]);
                    UtilityData.Subject = Convert.ToString(row["Subject"]);
                    UtilityData.Description = Convert.ToString(row["Description"]);
                    UtilityData.TktTypeName = Convert.ToString(row["Ticket Type"]);
                    UtilityData.UserName = Convert.ToString(row["Raised By"]);
                    UtilityData.AddedOn = Convert.ToString(row["Raised On"]);
                    UtilityData.Comment = Convert.ToString(row["RESOLUTIONCOMMENT"]);
                    UtilityData.IsApproved = Convert.ToInt32(row["IsApproved"]);
                }
            }
            if (dt2 != null)
            {
                int i = 0;
                foreach (DataRow row in dt2.Rows)
                {
                    i++;
                    BO.AttachmentList item = new BO.AttachmentList();
                    item.SrNo = i;
                    item.runningno = i;
                    item.DocName = Convert.ToString(row["DocName"]);
                    item.FilePath = Convert.ToString(row["FilePath"]);
                    item.UploadFor = Convert.ToString(row["UploadFor"]);
                    item.ContentType = Convert.ToString(row["ContentType"]);
                    UtilityAttachmentList.Add(item);
                }

            }

            UtilityData.Attachment = UtilityAttachmentList;

            return UtilityData;
        }
        public List<BO.TicketSystem> AjaxDashboardListAgainstType(string FromDate, string ToDate, string Type)
        {

            List<BO.TicketSystem> ReceivedList = new List<BO.TicketSystem>();
            DataTable ReceivedListDL = new DataTable();
            ReceivedListDL = DBManager.AjaxDashboardListAgainstType(FromDate, ToDate, Type);
            int i = 0;
            if (ReceivedListDL != null)
            {
                foreach (DataRow row in ReceivedListDL.Rows)
                {
                    i++;
                    BO.TicketSystem UtilityData = new BO.TicketSystem();
                    UtilityData.SrNo = i;
                    UtilityData.ID = Convert.ToInt32(row["ID"]);
                    UtilityData.TktNo = Convert.ToString(row["Ticket No"]);
                    UtilityData.Description = Convert.ToString(row["Description"]);
                    UtilityData.TktTypeName = Convert.ToString(row["Ticket Type"]);
                    UtilityData.UserName = Convert.ToString(row["Raised By"]);
                    UtilityData.AddedOn = Convert.ToString(row["Raised On"]);
                    UtilityData.ClosedOn = Convert.ToString(row["Closed On"]);
                    UtilityData.ClosedByName = Convert.ToString(row["Closed By"]);
                    UtilityData.PendingSince = Convert.ToInt32(row["Pending Since"]);
                    ReceivedList.Add(UtilityData);
                }
            }

            return ReceivedList;
        }
        public List<BO.TicketSystem> AjaxTicketListAgainstKeyword(string FromDate, string ToDate, string searchText)
        {

            List<BO.TicketSystem> ReceivedList = new List<BO.TicketSystem>();
            DataTable ReceivedListDL = new DataTable();
            ReceivedListDL = DBManager.AjaxTicketListAgainstKeyword(FromDate, ToDate, searchText);
            int i = 0;
            if (ReceivedListDL != null)
            {
                foreach (DataRow row in ReceivedListDL.Rows)
                {
                    i++;
                    BO.TicketSystem UtilityData = new BO.TicketSystem();
                    UtilityData.SrNo = i;
                    UtilityData.ID = Convert.ToInt32(row["ID"]);
                    UtilityData.TktNo = Convert.ToString(row["Ticket No"]);
                    UtilityData.Subject = Convert.ToString(row["Subject"]);
                    UtilityData.Description = Convert.ToString(row["Description"]);
                    UtilityData.TktTypeName = Convert.ToString(row["Ticket Type"]);
                    UtilityData.UserName = Convert.ToString(row["Raised By"]);
                    UtilityData.AddedOn = Convert.ToString(row["Raised On"]);
                    UtilityData.ClosedOn = Convert.ToString(row["Closed On"]);
                    UtilityData.ClosedByName = Convert.ToString(row["Closed By"]);
                    UtilityData.PendingSince = Convert.ToInt32(row["Pending Since"]);
                    ReceivedList.Add(UtilityData);
                }
            }

            return ReceivedList;
        }

       
    }
}
