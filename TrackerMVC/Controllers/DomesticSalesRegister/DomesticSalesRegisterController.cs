using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using TrackerMVC.Filters;
using System.IO;
using System.Data;
using System.Data.OleDb;
using HC = TrackerMVCDataLayer.Helper;
using Newtonsoft.Json;
using System.Web.UI.WebControls;
using System.Web.UI;
using BE = TrackerMVCEntities.BusinessEntities;
using BM = TrackerMVCBusinessLayer.TrackerMVCBusinessManger;


namespace TrackerMVC.Controllers.DomesticSalesRegister
{
    [UserAuthenticationFilter]
    public class DomesticSalesRegisterController : Controller
    {
        HC.DBOperations db = new HC.DBOperations();
        // GET: DomesticSalesRegister
        BM.DomesticSalesRegister.DomesticSalesRegister DR = new BM.DomesticSalesRegister.DomesticSalesRegister();
        BM.BLDataManager.GenerateBL BL = new BM.BLDataManager.GenerateBL();
        public ActionResult DomesticSalesRegister()
        {
            return View();
        }
        public ActionResult GetDataBind(string fromDate, string ToDate)
        {
            DataTable dt = new DataTable();
            DataTable CompanyMaster = new DataTable();
            //SqlConnection con = new SqlConnection(strval);
            //SqlCommand cmd = new SqlCommand("usp_BondSaleReg_Report", con);
            //SqlDataAdapter sda = new SqlDataAdapter(cmd);
            //sda.Fill(dt);

            HC.DBOperations db = new HC.DBOperations();
            dt = db.sub_GetDatatable("usp_DomesticSaleReg_Report '" + Convert.ToDateTime(fromDate).ToString("yyyy-MM-dd HH:mm:ss") + "','" + Convert.ToDateTime(ToDate).ToString("yyyy-MM-dd HH:mm:ss") + "'");
            Session["DomesticSalesRegister"] = dt;
            Session["fromdate"] = fromDate;
            Session["todate"] = ToDate;
            CompanyMaster = db.sub_GetDatatable("USP_COMPANYDETAILS");
            var CompanyName = Convert.ToString(CompanyMaster.Rows[0]["con_Name"]);
            var CompanyAddress = Convert.ToString(CompanyMaster.Rows[0]["AddressI"]);
            string json = JsonConvert.SerializeObject(dt);
            var jsonResult = Json(json, JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;

            return jsonResult;

        }

        public ActionResult ExportToExcelImpHC()
        {
            DataTable dt = (DataTable)Session["DomesticSalesRegister"];
            DataTable CompanyMaster = new DataTable();
            HC.DBOperations db = new HC.DBOperations();

            CompanyMaster = db.sub_GetDatatable("USP_COMPANYDETAILS");
            var CompanyName = Convert.ToString(CompanyMaster.Rows[0]["con_Name"]);
            var CompanyAddress = Convert.ToString(CompanyMaster.Rows[0]["AddressI"]);
            //DataTable FuelStockSummary = (DataTable)Session["FuelStockSummary"];
            string Tittle = "From " + Session["fromdate"] + " To " + Session["todate"] + ".";
            GridView gridview = new GridView();
            gridview.DataSource = dt;
            gridview.DataBind();

            Response.Clear();
            Response.Buffer = true;
            Response.Charset = "";
            Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            Response.AddHeader("content-disposition", "attachment;filename=BondSalesRegister.xls");
            using (StringWriter sw = new StringWriter())
            {
                using (HtmlTextWriter htw = new HtmlTextWriter(sw))
                {
                    htw.Write("<table><tr><td style='font-weight: bold; text-align: center'; colspan ='7'><strong style='font-size: 26px'>" + CompanyName + " <strong></td></tr>");
                    htw.Write("<table><tr><td style='font-weight: bold; text-align: center'; colspan ='7'><strong style='font-size: 15px'>" + CompanyAddress + " <strong></td></tr>");
                    htw.Write("<table><tr><td style='font-weight: bold; text-align: center'; colspan ='7'><strong style='font-size: 15px'>Domestc Sales Summary Report <strong></td></tr>");
                    htw.Write("<table><tr><td style='font-weight: bold; text-align: center'; colspan ='7'><strong style='font-size: 15px'>" + Tittle + " <strong></td></tr>");
                    htw.Write("<table><tr><td colspan='7'><h6 style='text-align:left'> *output generated by tracker </h6></td></tr>");
                    // render the GridView to the HtmlTextWriter
                    gridview.RenderControl(htw);
                    // Output the GridView content saved into StringWriter
                    Response.Output.Write(sw.ToString());
                    Response.Flush();
                    Response.End();
                }
            }

            return View();
        }
        //Code Start by Rahul
        public ActionResult DomesticSalesRegisterJOWise()
        {
          
            return View();
        }
        public ActionResult GetDataBindDomesticJOWise(string fromDate, string ToDate)
        {

            DataTable dt = new DataTable();
            HC.DBOperations db = new HC.DBOperations();
            dt = db.sub_GetDatatable("USP_DOMESTIC_SALES_REGISTER_TRACKER '" + Convert.ToDateTime(fromDate).ToString("yyyy-MM-dd HH:mm:ss") + "','" + Convert.ToDateTime(ToDate).ToString("yyyy-MM-dd HH:mm:ss") + "','0','0','0','0','0',''");
            Session["DomesticSalesRegisterJOWise"] = dt;
            Session["fromdateDom"] = Convert.ToDateTime(fromDate).ToString("dd MMM yyyy HH:mm");
            Session["todateDom"] = Convert.ToDateTime(ToDate).ToString("dd MMM yyyy HH:mm");

            string json = JsonConvert.SerializeObject(dt);
            var jsonResult = Json(json, JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;

            return jsonResult;
        }
        public ActionResult ExportToExcelDomesticSalesJO()
        {
            DataTable dt = (DataTable)Session["DomesticSalesRegisterJOWise"];
            DataTable CompanyMaster = new DataTable();
            HC.DBOperations db = new HC.DBOperations();

            CompanyMaster = db.sub_GetDatatable("USP_COMPANYDETAILS");
            var CompanyName = Convert.ToString(CompanyMaster.Rows[0]["con_Name"]);
            var CompanyAddress = Convert.ToString(CompanyMaster.Rows[0]["AddressI"]);
            string Tittle = "From " + Session["fromdateDom"] + " To " + Session["todateDom"] + ".";
            GridView gridview = new GridView();
            gridview.DataSource = dt;
            gridview.DataBind();
            gridview.HeaderRow.Style.Add("background-color", "LightBlue");
            Response.Clear();
            Response.Buffer = true;
            Response.Charset = "";
            Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            Response.AddHeader("content-disposition", "attachment;filename=DomesticSalesRegisterJO.xls");
            using (StringWriter sw = new StringWriter())
            {
                using (HtmlTextWriter htw = new HtmlTextWriter(sw))
                {
                    htw.Write("<table><tr><td style='font-weight: bold; text-align: center'; colspan ='" + dt.Columns.Count + "'><strong style='font-size: 26px'>" + CompanyName + " <strong></td></tr>");
                    htw.Write("<table><tr><td style='font-weight: bold; text-align: center'; colspan ='" + dt.Columns.Count + "'><strong style='font-size: 15px'>" + CompanyAddress + " <strong></td></tr>");
                    htw.Write("<table><tr><td style='font-weight: bold; text-align: center'; colspan ='" + dt.Columns.Count + "'><strong style='font-size: 15px'>Domestic Sales Register JO Wise<strong></td></tr>");
                    htw.Write("<table><tr><td style='font-weight: bold; text-align: center'; colspan ='" + dt.Columns.Count + "'><strong style='font-size: 15px'>" + Tittle + " <strong></td></tr>");
                    htw.Write("<table><tr><td colspan='" + dt.Columns.Count + "'><h6 style='text-align:left'> *output generated by tracker </h6></td></tr>");
                    // render the GridView to the HtmlTextWriter
                    gridview.RenderControl(htw);
                    // Output the GridView content saved into StringWriter
                    Response.Output.Write(sw.ToString());
                    Response.Flush();
                    Response.End();
                }
            }

            return View();
        }
        //Code end by rahul


        public ActionResult JobOrderCargoJo()
        {

            List<BE.CustomerMaster> CustomerList = new List<BE.CustomerMaster>();
            CustomerList = DR.GetCustomer();
            ViewBag.Customer = new SelectList(CustomerList, "AGID", "AGName");

            List<BE.CommodityGroup> CommodityList = new List<BE.CommodityGroup>();
            CommodityList = DR.GetCommodity();
            ViewBag.Commodity = new SelectList(CommodityList, "Commodity_Group_ID", "Commodity_Group_Name");
            return View();
        }
        [HttpPost]
        public JsonResult AjaxImportDomesticJo()
        {
            int Userid = Convert.ToInt32(Session["Tracker_userID"]);
            string message = "";
            List<BE.DomesticCargoEntites> CargoList = new List<BE.DomesticCargoEntites>();
            if (Request.Files.Count > 0)
            {
                try
                {

                    //  Get all files from Request object  
                    HttpFileCollectionBase files = Request.Files;
                    for (int i = 0; i < files.Count; i++)
                    {


                        HttpPostedFileBase file = files[i];
                        string fname;

                        // Checking for Internet Explorer  
                        if (Request.Browser.Browser.ToUpper() == "IE" || Request.Browser.Browser.ToUpper() == "INTERNETEXPLORER")
                        {
                            string[] testfiles = file.FileName.Split(new char[] { '\\' });
                            fname = testfiles[testfiles.Length - 1];
                        }
                        else
                        {
                            fname = file.FileName;
                        }

                        // Get the complete folder path and store the file inside it.  
                        fname = Path.Combine(Server.MapPath("~/DomesticImportFile/"), fname);
                        //  fname = Path.Combine(fname);
                        file.SaveAs(fname);
                        string extension = Path.GetExtension(fname);
                        string conString = string.Empty;
                        switch (extension)
                        {
                            case ".xls": //Excel 97-03.
                                // conString = ConfigurationManager.ConnectionStrings["Excel03ConString"].ConnectionString;
                                conString = String.Format("Provider=Microsoft.Jet.OLEDB.4.0;Data Source={0};Extended Properties='Excel 8.0;HDR=YES'", fname);
                                break;
                            case ".xlsx": //Excel 07 and above.
                                //conString = ConfigurationManager.ConnectionStrings["Excel07ConString"].ConnectionString;
                                conString = String.Format("Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties='Excel 8.0;HDR=YES'", fname);
                                break;
                        }
                        //BL.AddErrorLog(conString.Replace("'",""));
                        //BL.AddErrorLog(fname.Replace("'", ""));
                        //  conString = String.Format("Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties='Excel 8.0;HDR=YES'", fname);
                        //  BL.AddErrorLog("Connection close");
                        using (OleDbConnection connExcel = new OleDbConnection(conString))
                        {
                            // BL.AddErrorLog("OleDbConnection");
                            using (OleDbCommand cmdExcel = new OleDbCommand())
                            {
                                // BL.AddErrorLog("cmdExcel");
                                using (OleDbDataAdapter odaExcel = new OleDbDataAdapter())
                                {
                                    //  BL.AddErrorLog("odaExcel");
                                    DataTable dt = new DataTable();
                                    cmdExcel.Connection = connExcel;

                                    //Get the name of First Sheet.
                                    connExcel.Open();
                                    //  BL.AddErrorLog("Open connection");
                                    DataTable dtExcelSchema;
                                    dtExcelSchema = connExcel.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                                    string sheetName = dtExcelSchema.Rows[0]["TABLE_NAME"].ToString();
                                    //  BL.AddErrorLog(sheetName);
                                    connExcel.Close();

                                    //Read Data from First Sheet.
                                    connExcel.Open();
                                    cmdExcel.CommandText = "SELECT * From [" + sheetName + "]";
                                    odaExcel.SelectCommand = cmdExcel;
                                    odaExcel.Fill(dt);
                                    connExcel.Close();

                                    DataTable CargoJo = new DataTable();


                                    CargoJo.Columns.Add("Batch");
                                    CargoJo.Columns.Add("Truck No");
                                    CargoJo.Columns.Add("GST Invoice Number");
                                    CargoJo.Columns.Add("Sold to Party");
                                    CargoJo.Columns.Add("Ship to Party");
                                    CargoJo.Columns.Add("Destination");
                                    CargoJo.Columns.Add("Gross Wt");
                                    CargoJo.Columns.Add("Invoice Qty");
                                    CargoJo.Columns.Add("Thickness");
                                    CargoJo.Columns.Add("Width/Diameter");
                                    CargoJo.Columns.Add("Length");
                                    CargoJo.Columns.Add("Billing Date");
                                    CargoJo.Columns.Add("LR No.");
                                    CargoJo.Columns.Add("E-Way Bill No.");
                                    CargoJo.Columns.Add("E-Way Bill Validity");
                                    CargoJo.Columns.Add("Allocation  zone");
                                    CargoJo.Columns.Add("MM ROUTES");
                                    CargoJo.Columns.Add("Integrated GST");
                                    CargoJo.Columns.Add("Central GST");
                                    CargoJo.Columns.Add("State GST");
                                    CargoJo.Columns.Add("Ass_value");
                                    CargoJo.Columns.Add("Total Value");



                                    foreach (DataRow row in dt.Rows)
                                    {
                                        DateTime dDate;
                                        if (row[0].ToString() != "" && row[1].ToString() != "" && row[2].ToString() != "")
                                        {


                                            DataRow dar = CargoJo.NewRow();

                                            dar["Batch"] = row[0].ToString().ToUpper();
                                            dar["Truck No"] = row[1].ToString();
                                            dar["GST Invoice Number"] = row[2].ToString().ToUpper();
                                            dar["Sold to Party"] = row[3].ToString().ToUpper();
                                            dar["Ship to Party"] = row[4].ToString().ToUpper();
                                            dar["Destination"] = row[5].ToString().ToUpper();
                                            dar["Gross Wt"] = row[6].ToString();
                                            dar["Invoice Qty"] = row[7].ToString();
                                            dar["Thickness"] = row[8].ToString();
                                            dar["Width/Diameter"] = row[9].ToString();
                                            dar["Length"] = row[10].ToString();
                                            dar["Billing Date"] = row[11].ToString();
                                            dar["LR No."] = row[12].ToString();
                                            dar["E-Way Bill No."] = row[13].ToString();
                                            dar["E-Way Bill Validity"] = row[14].ToString();
                                            dar["Allocation  zone"] = row[15].ToString();
                                            dar["MM ROUTES"] = row[16].ToString();

                                            dar["Integrated GST"] = row[17].ToString();
                                            dar["Central GST"] = row[18].ToString();
                                            dar["State GST"] = row[19].ToString();
                                            dar["Ass_value"] = row[20].ToString();
                                            dar["Total Value"] = row[21].ToString();
                                            CargoJo.Rows.Add(dar);
                                            int linenum = dt.Rows.IndexOf(row);
                                            if (linenum == 1050)
                                            {
                                                int count1 = 0;
                                            }
                                        }
                                        else
                                        {
                                            message = "Please Check the Excel File Empty Rows are present!";
                                            var returnField = new { DuplicateMsg = message, ListForCargotype = CargoList };
                                            return new JsonResult() { Data = returnField, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                                        }
                                    }




                                    if (fname != null || fname != string.Empty)
                                    {
                                        if ((System.IO.File.Exists(fname)))
                                        {
                                            System.IO.File.Delete(fname);
                                        }

                                    }

                                    if (CargoJo != null)
                                    {

                                        message = DR.ValidationForCargoType(CargoJo);

                                        if (message == "")
                                        {
                                            CargoList = DR.GetDomesticCargoType(CargoJo);

                                            var returnField = new { DuplicateMsg = message, ListForCargotype = CargoList };
                                            return new JsonResult() { Data = returnField, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                                        }
                                        else
                                        {

                                            var returnField = new { DuplicateMsg = message, ListForCargotype = CargoList };
                                            return new JsonResult() { Data = returnField, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                                        }
                                    }

                                }
                            }
                        }
                    }
                    return Json("File imported Successfully!");
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error occurred. Error details: " + ex.Message);
                    BL.AddErrorLog("Error occurred. Error details: " + ex.Message.Replace("'", ""));
                    return Json("Error occurred. Error details: " + ex.Message);
                    //return Json(1);
                    //  return Json("FormData is not supported.");
                }
            }
            else
            {
                return Json("No files selected.");
            }
        }

        public ActionResult AddDomesticCargoType(string JoDate, string Customer, string Commodity,
           List<BE.DomesticCargoEntites> CargoList)
        {
            DataTable dataTable = new DataTable();

            dataTable.Columns.Add("Batch");
            dataTable.Columns.Add("Truckno");
            dataTable.Columns.Add("InvoiceNo");
            dataTable.Columns.Add("Sold");
            dataTable.Columns.Add("Ship");
            dataTable.Columns.Add("Destination");
            dataTable.Columns.Add("Gross");
            dataTable.Columns.Add("InvoiceQty");
            dataTable.Columns.Add("Thickness");
            dataTable.Columns.Add("Diameter");
            dataTable.Columns.Add("Length");
            dataTable.Columns.Add("BillingDate");
            dataTable.Columns.Add("LRNo");
            dataTable.Columns.Add("EWayBillNo");
            dataTable.Columns.Add("EWayBillValidity");
            dataTable.Columns.Add("Allocation");
            dataTable.Columns.Add("ROUTES");

            dataTable.Columns.Add("IGST");
            dataTable.Columns.Add("CGST");
            dataTable.Columns.Add("SGST");
            dataTable.Columns.Add("AssessValue");
            dataTable.Columns.Add("TotalValue");


            //int Count = 1;
            foreach (BE.DomesticCargoEntites item in CargoList)
            {
                DataRow row = dataTable.NewRow();

                row["Batch"] = item.Batch;
                row["Truckno"] = item.Truckno;
                row["InvoiceNo"] = item.InvoiceNo;
                row["Sold"] = item.Sold;
                row["Ship"] = item.Ship;
                row["Destination"] = item.Destination;
                row["Gross"] = item.Gross;
                row["InvoiceQty"] = item.InvoiceQty;
                row["Thickness"] = item.Thickness;
                row["Diameter"] = item.Diameter;
                row["Length"] = item.Length;
                row["BillingDate"] = Convert.ToDateTime(item.BillingDate).ToString("dd MMM yyyy HH:mm");
                row["LRNo"] = item.LRNo;
                row["EWayBillNo"] = item.EWayBillNo;
                row["EWayBillValidity"] = Convert.ToDateTime(item.EWayBillValidity).ToString("dd MMM yyyy HH:mm"); ;
                row["Allocation"] = item.Allocation;
                row["ROUTES"] = item.ROUTES;
                row["IGST"] = item.IGST;
                row["CGST"] = item.CGST;
                row["SGST"] = item.SGST;
                row["AssessValue"] = item.AssessValue;
                row["TotalValue"] = item.TotalValue;
                dataTable.Rows.Add(row);
            }
            int Userid = Convert.ToInt32(Session["Tracker_userID"]);
            string message = "";
            message = DR.AddDomesticCargoType(JoDate, Customer, Commodity, dataTable);

            return Json(message, JsonRequestBehavior.AllowGet);

            // return Json(1);
        }


        public JsonResult GetGenerateCargojoDetails(string FromDate, string ToDate)
        {
            int Userid = Convert.ToInt32(Session["Tracker_userID"]);
            DataTable CargoList = new DataTable();
            HC.DBOperations db = new HC.DBOperations();

            CargoList = db.sub_GetDatatable("USP_GetGenerateCargoJo_Details'" + FromDate + "','" + ToDate + "'");
            Session["fromdate"] = FromDate;
            Session["todate"] = ToDate;
            Session["CargoDetailsExport"] = CargoList;
            var jsonResult = Json(JsonConvert.SerializeObject(CargoList), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }

        public ActionResult ExportToExcelGenerateCargoJo(string fromdate, string todate)
        {
            DataTable CompanyMaster = new DataTable();
            HC.DBOperations db = new HC.DBOperations();
            // dt = db.sub_GetDatatable("USP_GetContainerSurveyRemarks '" + containerNo + "'");
            CompanyMaster = db.sub_GetDatatable("USP_COMPANYDETAILS");
            var CompanyName = Convert.ToString(CompanyMaster.Rows[0]["con_Name"]);
            var CompanyAddress = Convert.ToString(CompanyMaster.Rows[0]["AddressI"]);
            DataTable getMovementICDNew = (DataTable)Session["CargoDetailsExport"];
            string Tittle = "From " + Session["fromdate"] + " To " + Session["todate"] + ".";
            GridView gridview = new GridView();
            gridview.DataSource = getMovementICDNew;
            gridview.DataBind();

            Response.Clear();
            Response.Buffer = true;
            Response.Charset = "";
            Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            Response.AddHeader("content-disposition", "attachment;filename=Generate Cargo JO Details.xls");
            using (StringWriter sw = new StringWriter())
            {
                using (HtmlTextWriter htw = new HtmlTextWriter(sw))

                {

                    // render the GridView to the HtmlTextWriter
                    htw.Write("<table><tr><td  style='font-weight: bold; text-align: center'; colspan ='7'><strong style='font-size: 26px'>" + CompanyName + " <strong></td></tr>");
                    htw.Write("<table><tr><td  style='font-weight: bold; text-align: center'; colspan ='7'><strong style='font-size: 15px'>" + CompanyAddress + " <strong></td></tr>");
                    htw.Write("<table><tr><td  style='font-weight: bold; text-align: center'; colspan ='7'><strong style='font-size: 15px'> Generate Cargo JO Report<strong></td></tr>");
                    htw.Write("<table><tr><td  style='font-weight: bold; text-align: center'; colspan ='7'><strong style='font-size: 15px'>" + Tittle + " <strong></td></tr>");
                    htw.Write("<table><tr><td colspan='7'><h6 style='text-align:left'> *output generated by tracker </h6></td></tr>");
                    gridview.RenderControl(htw);
                    // Output the GridView content saved into StringWriter
                    Response.Output.Write(sw.ToString());
                    Response.Flush();
                    Response.End();
                }
            }

            return View();
        }

        public ActionResult ExportToFormatForgenerateCargoType()
        {
            string fileName = "~/Format/InvoiceTemplete.xlsx";
            if (fileName != "")
            {
                string filePath = fileName;
                Response.ContentType = "doc/docx";
                Response.AddHeader("Content-Disposition", "attachment;filename=\"" + filePath + "\"");
                Response.TransmitFile(Server.MapPath(filePath));
                Response.End();
            }

          

            return View();
        }

        public ActionResult UploadInvoiceCopy()
        {

            return View();
        }

        [HttpPost]
        public JsonResult GetUploadcopyInvoicedetails(string FromDate, string ToDate, string searchcerteria, string Searchtext)
        {
            DataTable tblInvoiceList = new DataTable();
            HC.DBOperations db = new HC.DBOperations();
            var InvoiceList = "";

            tblInvoiceList = db.sub_GetDatatable("USP_GetUploadInvoiceCopyDetails '" + FromDate + "','" + ToDate + "','" + searchcerteria + "','" + Searchtext + "'");
            if (tblInvoiceList.Rows.Count > 0)
            {
                InvoiceList = JsonConvert.SerializeObject(tblInvoiceList);
            }
            else
            {
                InvoiceList = "0";
            }
            tblInvoiceList.Columns.Remove("#");
            Session["UploadInvoiceCopysExport"] = tblInvoiceList;
            Session["fromdate"] = FromDate;
            Session["todate"] = ToDate;
            return new JsonResult() { Data = InvoiceList, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
        }

        public ActionResult ExporttoExcelJoType()
        {
            DataTable CompanyMaster = new DataTable();
            HC.DBOperations db = new HC.DBOperations();
            // dt = db.sub_GetDatatable("USP_GetContainerSurveyRemarks '" + containerNo + "'");
            CompanyMaster = db.sub_GetDatatable("USP_COMPANYDETAILS");
            var CompanyName = Convert.ToString(CompanyMaster.Rows[0]["con_Name"]);
            var CompanyAddress = Convert.ToString(CompanyMaster.Rows[0]["AddressI"]);
            DataTable getMovementICDNew = (DataTable)Session["UploadInvoiceCopysExport"];
            string Tittle = "From " + Session["fromdate"] + " To " + Session["todate"] + ".";
            GridView gridview = new GridView();
            gridview.DataSource = getMovementICDNew;
            gridview.DataBind();

            Response.Clear();
            Response.Buffer = true;
            Response.Charset = "";
            Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            Response.AddHeader("content-disposition", "attachment;filename=Generate Cargo JO Details.xls");
            using (StringWriter sw = new StringWriter())
            {
                using (HtmlTextWriter htw = new HtmlTextWriter(sw))

                {

                    // render the GridView to the HtmlTextWriter
                    htw.Write("<table><tr><td style='font-weight: bold; text-align: center'; colspan ='7'><strong style='font-size: 26px'>" + CompanyName + " <strong></td></tr>");
                    htw.Write("<table><tr><td style='font-weight: bold; text-align: center'; colspan ='7'><strong style='font-size: 15px'>" + CompanyAddress + " <strong></td></tr>");
                    htw.Write("<table><tr><td style='font-weight: bold; text-align: center'; colspan ='7'><strong style='font-size: 15px'> Generate Cargo JO Report<strong></td></tr>");
                    htw.Write("<table><tr><td style='font-weight: bold; text-align: center'; colspan ='7'><strong style='font-size: 15px'>" + Tittle + " <strong></td></tr>");
                    htw.Write("<table><tr><td colspan='7'><h6 style='text-align:left'> *output generated by tracker </h6></td></tr>");
                    gridview.RenderControl(htw);
                    // Output the GridView content saved into StringWriter
                    Response.Output.Write(sw.ToString());
                    Response.Flush();
                    Response.End();
                }
            }

            return View();
        }



        public ActionResult UploadCopyDetails(string GSTInvocieNO)
        {

            BE.DomesticCargoEntites DocList = new BE.DomesticCargoEntites();
            DocList = DR.GetUploaddetailsForCopy(GSTInvocieNO);

            List<BE.DocList> DocList1 = new List<BE.DocList>();
            DocList1 = DR.GetDocsDetails();

            ViewBag.DocList = new SelectList(DocList1, "DocID", "DocName");

            ViewBag.InvoiceNo = DocList.InvoiceNo;
            ViewBag.Batch = DocList.Batch;
            ViewBag.JoNo = DocList.JoNo;
            ViewBag.Jodate = DocList.Jodate;
            ViewBag.Truckno = DocList.Truckno;
            ViewBag.Destination = DocList.Destination;
            ViewBag.Customer = DocList.Customer;
            ViewBag.BillingDate = DocList.BillingDate;



            return PartialView(DocList);
        }

        [HttpPost]
        public JsonResult ImportFile(BE.DomesticCargoEntites fileData)
        {
            int Userid = Convert.ToInt32(Session["Tracker_userID"]);
            if (Request.Files.Count > 0)
            {
                try
                {
                    HttpFileCollectionBase files = Request.Files;
                    for (int i = 0; i < files.Count; i++)
                    {
                        HttpPostedFileBase file = files[i];
                        string fname;
                        if (Request.Browser.Browser.ToUpper() == "IE" || Request.Browser.Browser.ToUpper() == "INTERNETEXPLORER")
                        {
                            string[] testfiles = file.FileName.Split(new char[] { '\\' });
                            fname = testfiles[testfiles.Length - 1];
                        }
                        else
                        {
                            fname = file.FileName;
                        }

                        string InvoiceNo = fileData.InvoiceNo;
                        int DocID = fileData.DocID;

                        string root = Path.Combine(Server.MapPath("~/InvoiceDocs/"), InvoiceNo);
                        string PathSave = "~/InvoiceDocs/" + InvoiceNo + "/" + fname;
                        if (!Directory.Exists(root))
                        {
                            Directory.CreateDirectory(root);
                        }
                        fname = Path.Combine(Server.MapPath("~/InvoiceDocs/" + InvoiceNo + "/"), fname);
                        //fname = Path.Combine(root, "/" + fname);
                        if (System.IO.File.Exists(fname))
                        {
                            System.IO.File.Delete(fname);
                        }
                        file.SaveAs(fname);
                        if (System.IO.File.Exists(fname))
                        {
                            db.sub_ExecuteNonQuery("USP_Insert_Invoice_Cop_Details " + InvoiceNo + "," + DocID + ",'" + PathSave + "'," + Userid + "");
                            return Json("Document uploaded successfully!");
                        }
                        else
                        {
                            return Json("Document not saved successfully!");
                        }
                    }
                    return Json(1);
                }
                catch (Exception ex)
                {
                    return Json("Error occurred. Error details: " + ex.Message);
                }
            }
            else
            {
                return Json("No files selected.");
            }
        }

        public ActionResult GetUplaodedCopy(string InvoiceNo)
        {
            DataTable dtscList = new DataTable();
            dtscList = db.sub_GetDatatable("USP_GetInvoiceDatauplaodeddetails " + InvoiceNo + "");
            string json = JsonConvert.SerializeObject(dtscList);
            var jsonResult = Json(json, JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;

            return jsonResult;
        }


        public ActionResult ViewInvoiceCopyDetails(string GSTInvoiceno)
        {
            List<BE.DomesticCargoEntites> JOAttachmentList = new List<BE.DomesticCargoEntites>();
            @ViewBag.InvoiceNo = GSTInvoiceno;
            return PartialView(JOAttachmentList);

        }

        [HttpPost]
        public JsonResult GetInvoiceDetails(string InvoiceNo)
        {
            List<BE.DomesticCargoEntites> JOAttachmentList = new List<BE.DomesticCargoEntites>();
            int Userid = Convert.ToInt32(Session["Tracker_userID"]);
            JOAttachmentList = DR.GetInvoiceAttachment(InvoiceNo);
            var jsonResult = Json(JOAttachmentList, JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        //[HttpPost]
        public FileResult DownLoadFile(int id, string id1)
        {
            BE.DomesticCargoEntites LRDocumentList = new BE.DomesticCargoEntites();
            LRDocumentList = DR.getAttachment(id, id1);
            //return File(LRDocumentList.FilePath, LRDocumentList.DocumentType);
            return File(LRDocumentList.FilePath, "application.pdf");
        }
        // code by prashant k


        public ActionResult UploadDomesticHUBCargoDetails()
        {
            return View();
        }

        public ActionResult AjaxImportDomesticHUBData()
        {
            int Userid = Convert.ToInt32(Session["Tracker_userID"]);
            string message = "";
            List<BE.UploadDomesticHUBCargo> DomesticHubDataList = new List<BE.UploadDomesticHUBCargo>();
            if (Request.Files.Count > 0)
            {
                try
                {
                    //  Get all files from Request object  
                    HttpFileCollectionBase files = Request.Files;
                    for (int i = 0; i < files.Count; i++)
                    {

                        HttpPostedFileBase file = files[i];
                        string fname;

                        // Checking for Internet Explorer  
                        if (Request.Browser.Browser.ToUpper() == "IE" || Request.Browser.Browser.ToUpper() == "INTERNETEXPLORER")
                        {
                            string[] testfiles = file.FileName.Split(new char[] { '\\' });
                            fname = testfiles[testfiles.Length - 1];
                        }
                        else
                        {
                            fname = file.FileName;
                        }

                        // Get the complete folder path and store the file inside it.  
                        fname = Path.Combine(Server.MapPath("~/ImportFile/"), fname);

                        //Directory.CreateDirectory(@"C:\Users\ABC\source\repos\TrackerMVC\TrackerMVC\TrackerMVC" + "DomesticImportFile");
                        //fname = Path.Combine(fname);
                        file.SaveAs(fname);
                        string extension = Path.GetExtension(fname);
                        string conString = string.Empty;
                        switch (extension)
                        {
                            case ".xls": //Excel 97-03.
                                // conString = ConfigurationManager.ConnectionStrings["Excel03ConString"].ConnectionString;
                                conString = String.Format("Provider=Microsoft.Jet.OLEDB.4.0;Data Source={0};Extended Properties='Excel 8.0;HDR=YES'", fname);
                                break;
                            case ".xlsx": //Excel 07 and above.
                                //conString = ConfigurationManager.ConnectionStrings["Excel07ConString"].ConnectionString;
                                conString = String.Format("Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties='Excel 8.0;HDR=YES'", fname);
                                break;
                        }

                        using (OleDbConnection connExcel = new OleDbConnection(conString))
                        {

                            using (OleDbCommand cmdExcel = new OleDbCommand())
                            {

                                using (OleDbDataAdapter odaExcel = new OleDbDataAdapter())
                                {

                                    DataTable dt = new DataTable();
                                    cmdExcel.Connection = connExcel;

                                    connExcel.Open();
                                    DataTable dtExcelSchema;
                                    dtExcelSchema = connExcel.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                                    string sheetName = dtExcelSchema.Rows[0]["TABLE_NAME"].ToString();

                                    connExcel.Close();


                                    connExcel.Open();
                                    cmdExcel.CommandText = "SELECT * From [" + sheetName + "]";
                                    odaExcel.SelectCommand = cmdExcel;
                                    odaExcel.Fill(dt);
                                    connExcel.Close();

                                    DataTable DomesticHub = new DataTable();
                                    DomesticHub.Columns.Add("WagonNo");
                                    DomesticHub.Columns.Add("ContainerNo");
                                    DomesticHub.Columns.Add("Size");
                                    DomesticHub.Columns.Add("Stats");
                                    DomesticHub.Columns.Add("Stack");
                                    DomesticHub.Columns.Add("TriffType");
                                    DomesticHub.Columns.Add("SealNo");
                                    DomesticHub.Columns.Add("LRNo");
                                    DomesticHub.Columns.Add("TareWt");
                                    DomesticHub.Columns.Add("CargoWt");
                                    DomesticHub.Columns.Add("Destination");
                                    DomesticHub.Columns.Add("OrderNo");
                                    DomesticHub.Columns.Add("Shipment");
                                    DomesticHub.Columns.Add("DES");
                                    DomesticHub.Columns.Add("Grade");
                                    DomesticHub.Columns.Add("TaxInvNo");
                                    DomesticHub.Columns.Add("TaxInvDate");
                                    DomesticHub.Columns.Add("DeliveryNo");
                                    DomesticHub.Columns.Add("DCPINo");
                                    DomesticHub.Columns.Add("EWayBillNo");
                                    DomesticHub.Columns.Add("EWayBillValidUpTo");
                                    DomesticHub.Columns.Add("ShipToParty");

                                    DomesticHub.TableName = "PT_ImportDomesticHubData";


                                    int tpCount = 1;
                                    foreach (DataRow row in dt.Rows)
                                    {
                                        tpCount++;
                                        if (row[0].ToString() != "")
                                        {


                                            DataRow dr = DomesticHub.NewRow();


                                            dr["WagonNo"] = row[1].ToString().ToUpper();
                                            dr["ContainerNo"] = row[2].ToString();
                                            dr["Size"] = row[3].ToString().ToUpper();
                                            dr["Stats"] = row[4].ToString().ToUpper();
                                            dr["Stack"] = row[5].ToString().ToUpper();
                                            dr["TriffType"] = row[6].ToString().ToUpper();
                                            dr["SealNo"] = row[7].ToString();
                                            dr["LRNo"] = row[8].ToString();
                                            dr["TareWt"] = row[9].ToString();
                                            dr["CargoWt"] = row[10].ToString();
                                            dr["Destination"] = row[12].ToString();
                                            dr["OrderNo"] = row[13].ToString();
                                            dr["Shipment"] = row[14].ToString();
                                            dr["DES"] = row[15].ToString();
                                            dr["Grade"] = row[16].ToString();
                                            dr["TaxInvNo"] = row[17].ToString();
                                            dr["TaxInvDate"] = row[18].ToString();

                                            dr["DeliveryNo"] = row[19].ToString();
                                            dr["DCPINo"] = row[20].ToString();
                                            dr["EWayBillNo"] = row[21].ToString();
                                            dr["EWayBillValidUpTo"] = row[22].ToString();
                                            dr["ShipToParty"] = row[23].ToString();

                                            DomesticHub.Rows.Add(dr);

                                        }
                                        else
                                        {
                                            message = "Please Check the Excel File Empty Rows are present! " + row[0] + tpCount;
                                            var returnField = new { DuplicateMsg = message, ListForDomesticHub = DomesticHubDataList };
                                            return new JsonResult() { Data = returnField, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                                        }
                                    }



                                    if (fname != null || fname != string.Empty)
                                    {
                                        if ((System.IO.File.Exists(fname)))
                                        {
                                            System.IO.File.Delete(fname);
                                        }

                                    }

                                    if (DomesticHub != null)
                                    {
                                        if (message == "")
                                        {
                                            DomesticHubDataList = BL.GetUploadingHubData(DomesticHub);

                                            var returnField = new { DuplicateMsg = message, ListForDomesticHub = DomesticHubDataList };
                                            return new JsonResult() { Data = returnField, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                                        }
                                        else
                                        {

                                            var returnField = new { DuplicateMsg = message, ListForDomesticHub = DomesticHubDataList };
                                            return new JsonResult() { Data = returnField, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                                        }
                                    }

                                }
                            }
                        }
                    }
                    return Json("File imported Successfully!");
                }
                catch (Exception ex)
                {
                    return Json("Error occurred. Error details: " + ex.Message);
                }
            }
            else
            {
                return Json("No files selected.");
            }
        }

        public ActionResult InsertExcelDomesticHubData(List<BE.UploadDomesticHUBCargo> DomesticHubDataList, DateTime AddedOn)
        {
            int Userid = Convert.ToInt32(Session["Tracker_userID"]);

            DataTable dataTable = new DataTable();

            dataTable.Columns.Add("WagonNo", typeof(string));
            dataTable.Columns.Add("ContainerNo", typeof(string));
            dataTable.Columns.Add("Size", typeof(Int32));
            dataTable.Columns.Add("Stats", typeof(string));
            dataTable.Columns.Add("Stack", typeof(string));
            dataTable.Columns.Add("TriffType", typeof(string));
            dataTable.Columns.Add("SealNo", typeof(string));
            dataTable.Columns.Add("LRNo", typeof(string));
            dataTable.Columns.Add("TareWt", typeof(decimal));
            dataTable.Columns.Add("CargoWt", typeof(decimal));
            dataTable.Columns.Add("Destination", typeof(string));
            dataTable.Columns.Add("OrderNo", typeof(string));
            dataTable.Columns.Add("Shipment", typeof(string));
            dataTable.Columns.Add("DES", typeof(string));
            dataTable.Columns.Add("Grade", typeof(string));
            dataTable.Columns.Add("TaxInvNo", typeof(string));
            dataTable.Columns.Add("TaxInvDate", typeof(DateTime));
            dataTable.Columns.Add("DeliveryNo", typeof(string));
            dataTable.Columns.Add("DCPINo", typeof(string));
            dataTable.Columns.Add("EWayBillNo", typeof(string));
            dataTable.Columns.Add("EWayBillValidUpTo", typeof(DateTime));
            dataTable.Columns.Add("ShipToParty", typeof(string));

            dataTable.TableName = "PT_InsertDomesticHub";


            if (DomesticHubDataList != null)
            {
                DateTime date_;
                foreach (BE.UploadDomesticHUBCargo item in DomesticHubDataList)
                {
                    DataRow row = dataTable.NewRow();


                    row["WagonNo"] = item.WagonNo;
                    row["ContainerNo"] = item.ContainerNo;
                    row["Size"] = item.Size;
                    row["Stats"] = item.Stats;
                    row["Stack"] = item.Stack;
                    row["TriffType"] = item.TriffType;
                    row["SealNo"] = item.SealNo;
                    row["LRNo"] = item.LRNo;
                    row["TareWt"] = item.TareWt;
                    row["CargoWt"] = item.CargoWt;
                    row["Destination"] = item.Destination;
                    row["OrderNo"] = item.OrderNo;
                    row["Shipment"] = item.Shipment;
                    row["DES"] = item.DES;
                    row["Grade"] = item.Grade;
                    row["TaxInvNo"] = item.TaxInvNo;



                    if (item.DisplayTaxInvDate == "01-01-0001 00:00:00")
                    {
                        row["TaxInvDate"] = DBNull.Value;
                    }
                    else
                    {

                        row["TaxInvDate"] = item.DisplayTaxInvDate;
                    }
                    row["DeliveryNo"] = item.DeliveryNo;
                    row["DCPINo"] = item.DCPINo;
                    row["EWayBillNo"] = item.EWayBillNo;


                    if (item.DisplayEWayBillValidUpTo == "01-01-0001 00:00:00")
                    {
                        row["EWayBillValidUpTo"] = DBNull.Value;
                    }
                    else
                    {
                        row["EWayBillValidUpTo"] = item.DisplayEWayBillValidUpTo;
                    }

                    row["ShipToParty"] = item.ShipToParty;

                    dataTable.Rows.Add(row);
                }
            }

            BE.ResponseMessage result = BL.InsertExcelDomesticHubData(dataTable, Userid, AddedOn);
            return Json(result);
        }



        public ActionResult DomesticHubOffLoadingEntry()
        {
            List<BE.LocationM> LocationList = new List<BE.LocationM>();
            LocationList = BL.GetELocationame();
            ViewBag.Location = new SelectList(LocationList, "ID", "Location");

            return View();
        }

        public ActionResult GetDetailsContainerWise(string ContainerNo)
        {

            BE.DomesticHubOffLoadDts dts = new BE.DomesticHubOffLoadDts();
            dts = BL.GetDetailsContainerWise(ContainerNo);
            return Json(dts);
        }

        public ActionResult SaveDomesticHubOffLoading(BE.DomesticHubOffLoadDts HubOffLoadingData)
        {


            int Userid = Convert.ToInt32(Session["Tracker_userID"]);
            BE.ResponseMessage responseMessage = new BE.ResponseMessage();
            responseMessage = BL.SaveDomesticHubOffLoading(HubOffLoadingData, Userid);
            return Json(responseMessage);
        }
        // code by prashant k

        public ActionResult DomesticHUBLoadedInventory()
        {
            return View();
        }

        public ActionResult GetLoadedInsuranceSummary(string AsOn)
        {
            DataTable dt = new DataTable();
            DataTable CompanyMaster = new DataTable();

            HC.DBOperations db = new HC.DBOperations();
            dt = db.sub_GetDatatable("USP_GetLoadedInventorySummary '" + Convert.ToDateTime(AsOn).ToString("yyyy-MM-dd HH:mm:ss") + "'");
            Session["LoadedInsuranceSummary"] = dt;
            Session["AsOn"] = AsOn;

            CompanyMaster = db.sub_GetDatatable("USP_COMPANYDETAILS");
            var CompanyName = Convert.ToString(CompanyMaster.Rows[0]["con_Name"]);
            var CompanyAddress = Convert.ToString(CompanyMaster.Rows[0]["AddressI"]);
            string json = JsonConvert.SerializeObject(dt);
            var jsonResult = Json(json, JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;

        }

        public ActionResult ExportLoadedLRExcel()
        {
            DataTable CompanyMaster = new DataTable();
            HC.DBOperations db = new HC.DBOperations();
            // dt = db.sub_GetDatatable("USP_GetContainerSurveyRemarks '" + containerNo + "'");
            CompanyMaster = db.sub_GetDatatable("USP_COMPANYDETAILS");
            var CompanyName = Convert.ToString(CompanyMaster.Rows[0]["con_Name"]);
            var CompanyAddress = Convert.ToString(CompanyMaster.Rows[0]["AddressI"]);
            DataTable ErrorLogDetails = (DataTable)Session["LoadedInsuranceSummary"];
            GridView gridview = new GridView();
            gridview.DataSource = ErrorLogDetails;
            gridview.DataBind();

            Response.Clear();
            Response.Buffer = true;
            Response.Charset = "";
            Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            Response.AddHeader("content-disposition", "attachment;filename=Transport Error Details.xls");
            using (StringWriter sw = new StringWriter())
            {
                using (HtmlTextWriter htw = new HtmlTextWriter(sw))
                {

                    // render the GridView to the HtmlTextWriter
                    htw.Write("<table><tr><td  style='font-weight: bold; text-align: center'; colspan ='7'><strong style='font-size: 26px'>" + CompanyName + " <strong></td></tr>");
                    htw.Write("<table><tr><td  style='font-weight: bold; text-align: center'; colspan ='7'><strong style='font-size: 15px'>" + CompanyAddress + " <strong></td></tr>");
                    htw.Write("<table><tr><td  style='font-weight: bold; text-align: center'; colspan ='7'><strong style='font-size: 15px'>Transport Error Details<strong></td></tr>");

                    htw.Write("<table><tr><td colspan='7'><h6 style='text-align:left'> *output generated by tracker </h6></td></tr>");
                    gridview.RenderControl(htw);
                    // Output the GridView content saved into StringWriter
                    Response.Output.Write(sw.ToString());
                    Response.Flush();
                    Response.End();
                }
            }

            return View();
        }

    }
}